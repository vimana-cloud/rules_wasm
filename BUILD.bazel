load("@bazel_skylib//lib:selects.bzl", "selects")
load("@bazel_skylib//rules:copy_file.bzl", "copy_file")
load("@bazel_skylib//rules:native_binary.bzl", "native_binary")
load("@rules_cc//cc:defs.bzl", "cc_import", "cc_toolchain")
load(":private.bzl", "execution_platforms", "format_platform", "wasi_toolchain_config")

# Execution-platform-specific aliases for pre-built dependencies:
# Some custom rules need Bash, so Windows is out for now,
# but pre-built binaries might be available for other CPU's.

[selects.config_setting_group(
    name = "exe-" + platform,
    match_all = [
        "@platforms//cpu:" + platform.split("-")[0],
        "@platforms//os:" + platform.split("-")[1],
    ],
) for platform in execution_platforms]

native_binary(
    name = "wac",
    src = format_platform("@wac-{}//file"),
    visibility = ["//visibility:public"],
)

alias(
    name = "wasi-clang",
    actual = format_platform("@wasi-sdk-{}//:clang"),
    visibility = ["//visibility:public"],
)

alias(
    name = "wasm-tools",
    actual = format_platform("@wasm-tools-{}//:wasm-tools"),
    visibility = ["//visibility:public"],
)

alias(
    name = "wasmtime",
    actual = format_platform("@wasmtime-{}//:wasmtime"),
    visibility = ["//visibility:public"],
)

alias(
    name = "wit-bindgen",
    actual = format_platform("@wit-bindgen-{}//:wit-bindgen"),
    visibility = ["//visibility:public"],
)

# Rename the manually-downloaded `realloc` library, as per
# https://github.com/bytecodealliance/wit-bindgen/blob/v0.30.0/crates/guest-rust/rt/build.rs#L27.
copy_file(
    name = "libwit-bindgen-cabi-realloc",
    src = "@libwit-bindgen-cabi-realloc//file",
    out = "libwit_bindgen_cabi_realloc0_0_0.a",
)

# This file is also name-sensitive.
copy_file(
    name = "wasi-snapshot-preview1-reactor",
    src = "@wasi-snapshot-preview1-reactor//file",
    out = "wasi_snapshot_preview1.reactor.wasm",
    visibility = ["//wasm:__pkg__"],
)

# We need to manually import this realloc library to compile Rust files generated by wit-bindgen.
# This likely patches a bug in the way rules_rust handles `build.rs` files
# with target-based conditionals:
# https://github.com/bytecodealliance/wit-bindgen/blob/v0.30.0/crates/guest-rust/rt/build.rs#L10.
cc_import(
    name = "wit-bindgen-cabi-realloc",
    static_library = ":libwit-bindgen-cabi-realloc",
    visibility = ["//visibility:public"],
)

# WASI C++ toolchain config:
# The *Rust* compiler claims this is necessary,
# but AFAICT we can just use garbage values for every argument
# and everything will still work fine.

filegroup(name = "empty")  # An empty file group.

wasi_toolchain_config(name = "wasm32-wasi-cc-toolchain-config")

cc_toolchain(
    name = "wasm32-wasi-cc-toolchain",
    all_files = ":empty",
    compiler_files = ":empty",
    dwp_files = ":empty",
    linker_files = ":empty",
    objcopy_files = ":empty",
    strip_files = ":empty",
    supports_param_files = False,
    toolchain_config = ":wasm32-wasi-cc-toolchain-config",
)

toolchain(
    name = "wasm32-wasi-toolchain",
    target_compatible_with = [
        "@platforms//cpu:wasm32",
        "@platforms//os:wasi",
    ],
    toolchain = ":wasm32-wasi-cc-toolchain",
    toolchain_type = "@bazel_tools//tools/cpp:toolchain_type",
)
