load("@bazel_skylib//lib:selects.bzl", "selects")
load("@bazel_skylib//rules:copy_file.bzl", "copy_file")
load("@bazel_skylib//rules:native_binary.bzl", "native_binary")
load("@rules_cc//cc:defs.bzl", "cc_import")
load("@rules_cc//cc/toolchains:tool.bzl", "cc_tool")
load("@rules_cc//cc/toolchains:tool_map.bzl", "cc_tool_map")
load("@rules_cc//cc/toolchains:toolchain.bzl", "cc_toolchain")
load(":private.bzl", "execution_platforms", "format_platform")

platform(
    name = "wasm32-wasi-platform",
    constraint_values = [
        "@platforms//cpu:wasm32",
        "@platforms//os:wasi",
    ],
    visibility = ["//visibility:public"],
)

# Execution-platform-specific aliases for pre-built dependencies:
# Some custom rules need Bash, so Windows is out for now,
# but pre-built binaries might be available for other CPU's.

[selects.config_setting_group(
    name = "exe-" + platform,
    match_all = [
        "@platforms//cpu:" + platform.split("-")[0],
        "@platforms//os:" + platform.split("-")[1],
    ],
    visibility = ["//:__subpackages__"],
) for platform in execution_platforms]

native_binary(
    name = "wac",
    src = format_platform("@wac-{}//file"),
    visibility = ["//visibility:public"],
)

alias(
    name = "wasm-opt",
    actual = format_platform("@binaryen-{}//:wasm-opt"),
    visibility = ["//visibility:public"],
)

alias(
    name = "wasm-tools",
    actual = format_platform("@wasm-tools-{}//:wasm-tools"),
    visibility = ["//visibility:public"],
)

alias(
    name = "wasmtime",
    actual = format_platform("@wasmtime-{}//:wasmtime"),
    visibility = ["//visibility:public"],
)

alias(
    name = "wit-bindgen",
    actual = format_platform("@wit-bindgen-{}//:wit-bindgen"),
    visibility = ["//visibility:public"],
)

# Rename the manually-downloaded `realloc` library, as per
# https://github.com/bytecodealliance/wit-bindgen/blob/v0.30.0/crates/guest-rust/rt/build.rs#L27.
copy_file(
    name = "libwit-bindgen-cabi-realloc",
    src = "@libwit-bindgen-cabi-realloc//file",
    out = "libwit_bindgen_cabi_realloc0_0_0.a",
)

# This file is also name-sensitive.
copy_file(
    name = "wasi-snapshot-preview1-reactor",
    src = "@wasi-snapshot-preview1-reactor//file",
    out = "wasi_snapshot_preview1.reactor.wasm",
    visibility = ["//wasm:__pkg__"],
)

# We need to manually import this realloc library to compile Rust files generated by wit-bindgen.
# This likely patches a bug in the way rules_rust handles `build.rs` files
# with target-based conditionals:
# https://github.com/bytecodealliance/wit-bindgen/blob/v0.30.0/crates/guest-rust/rt/build.rs#L10.
cc_import(
    name = "wit-bindgen-cabi-realloc",
    static_library = ":libwit-bindgen-cabi-realloc",
    visibility = ["//visibility:public"],
)

# WASI CC toolchain:

toolchain(
    name = "wasm32-wasi-toolchain",
    target_compatible_with = [
        "@platforms//cpu:wasm32",
        "@platforms//os:wasi",
    ],
    toolchain = ":wasm32-wasi-cc-toolchain",
    toolchain_type = "@bazel_tools//tools/cpp:toolchain_type",
)

cc_toolchain(
    name = "wasm32-wasi-cc-toolchain",
    tool_map = ":wasm-cc-tool-map",
)

# Inspired by
# https://github.com/bazelbuild/rules_cc/blob/0.1.1/examples/rule_based_toolchain/toolchains/clang/tools/BUILD.bazel.
cc_tool_map(
    name = "wasm-cc-tool-map",
    tools = {
        "@rules_cc//cc/toolchains/actions:assembly_actions": ":clang",
        "@rules_cc//cc/toolchains/actions:ar_actions": ":llvm-ar",
        "@rules_cc//cc/toolchains/actions:c_compile": ":clang",
        "@rules_cc//cc/toolchains/actions:cpp_compile_actions": ":clang++",
        "@rules_cc//cc/toolchains/actions:link_actions": ":lld",
        "@rules_cc//cc/toolchains/actions:objcopy_embed_data": ":llvm-objcopy",
        "@rules_cc//cc/toolchains/actions:strip": ":llvm-strip",
    },
)

cc_tool(
    name = "clang",
    src = format_platform("@wasi-sdk-{}//:clang"),
    allowlist_include_directories = [":include"],
    data = [":include"],
)

cc_tool(
    name = "clang++",
    src = format_platform("@wasi-sdk-{}//:clang++"),
    allowlist_include_directories = [":include"],
    data = [":include"],
)

cc_tool(
    name = "lld",
    src = format_platform("@wasi-sdk-{}//:lld"),
    data = [":lib"],
)

cc_tool(
    name = "llvm-ar",
    src = format_platform("@wasi-sdk-{}//:llvm-ar"),
)

cc_tool(
    name = "llvm-objcopy",
    src = format_platform("@wasi-sdk-{}//:llvm-objcopy"),
)

cc_tool(
    name = "llvm-strip",
    src = format_platform("@wasi-sdk-{}//:llvm-strip"),
)

# Must be aliased because `allowlist_include_directories` does not support `select`.
alias(
    name = "include",
    actual = format_platform("@wasi-sdk-{}//:include"),
)

alias(
    name = "lib",
    actual = format_platform("@wasi-sdk-{}//:lib"),
)
